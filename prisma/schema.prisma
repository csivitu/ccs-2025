datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  accessToken       String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  valid        Boolean  @default(true)
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  // Provided by Google OAuth
  name  String
  email String @unique

  // Additional details to ask
  phoneNumber String @unique
  gender      Gender
  aboutUs     String

  attemptedDomains   AttemptedDomain[]
  attemptedQuestions AttempedQuestion[]
  attemptedTasks     AttemptedTask[]

  portfolios Portfolio[]

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttempedQuestion {
  id String @id @default(cuid())

  answer     String?

  @@unique([questionId, userId])
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id String @id @default(cuid())

  question String

  images String[]
  links  String[]

  difficulty QuestionDifficulty
  domain     DomainType

  attempts AttempedQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id String @id @default(cuid())

  title       String
  description String

  images String[]
  links  String[]

  domain    DomainType
  subDomain SubDomain

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttemptedTask {
  id        String    @id @default(cuid())
  subDomain SubDomain
  task      String[]
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id       String            @id @default(cuid())
  category PortfolioCategory
  link     String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttemptedDomain {
  id     String     @id @default(cuid())
  domain DomainType

  submitted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum DomainType {
  TECH
  DESIGN
  MANAGEMENT
  VIDEO
}

enum PortfolioCategory {
  TECH
  DESIGN
  MANAGEMENT
  VIDEO
  GITHUB
  LINKEDIN
  INSTAGRAM
  SPOTIFY
}

enum SubDomain {
  WEB_DEV
  APP_DEV
  MACHINE_LEARNING
  CYBER_SECURITY
  UI_UX
  GRAPHIC_DESIGN
  INTERNET_OF_THINGS
  BLOCKCHAIN
  GENERAL_PROGRAMMING
}
